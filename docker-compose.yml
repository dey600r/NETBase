version: "3.4"

name: microservices-environment
services:

  microservice-angular:
    container_name: microservice-angular
    hostname: "microservice-angular"
    image: microservice-angular:jwt
    build:
      context: ./
      dockerfile: Dockerfile-microservice-angular
    ports:
      - "3300:8080"
    networks:
      - network_microservices
  
  microservice-angular-ssr:
    container_name: microservice-angular-ssr
    hostname: "microservice-angular-ssr"
    image: microservice-angular:keycloak-ssr
    build:
      context: ./
      dockerfile: Dockerfile-microservice-angular-hexagonal-ssr
    ports:
      - "3301:4100"
    networks:
      - network_microservices

  microservice-gateway:
    container_name: microservice-gateway
    hostname: "microservice-gateway"
    image: microservice-gateway:keycloak
    build:
      context: ./
      dockerfile: Dockerfile-microservice-gateway
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
    ports:
      - "3400:8080"
      - "3401:8081"
    networks:
      - network_microservices

  microservice-security-api:
    container_name: microservice-security-api
    hostname: "microservice-security-api"
    image: microservice-security-api:keycloak
    build:
      context: ./
      dockerfile: Dockerfile-microservice-security
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
    ports:
      - "3500:8080"
      - "3501:8081"
    depends_on:  
     - sqlserver-db 
    networks:
      - network_microservices

  microservice-vehicle-api:
    container_name: microservice-vehicle-api
    hostname: "microservice-vehicle-api"
    image: microservice-vehicle-api:keycloak
    build:
      context: ./
      dockerfile: Dockerfile-microservice-vehicle
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
    ports:
      - "3600:8080"
      - "3601:8081"
    depends_on:  
     - sqlserver-db
     - rabbitmq
    networks:
      - network_microservices

  microservice-maintenance-api:
    container_name: microservice-maintenance-api
    hostname: "microservice-maintenance-api"
    image: microservice-maintenance-api:keycloak
    build: 
      context: ./
      dockerfile: Dockerfile-microservice-maintenance
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
    ports:
      - "3700:8080"
      - "3701:8081"
    depends_on:  
     - sqlserver-db
     - rabbitmq
    networks:
      - network_microservices

  microservice-setting-api:
    container_name: microservice-setting-api
    hostname: "microservice-setting-api"
    image: microservice-setting-api:keycloak
    build:
      context: ./
      dockerfile: Dockerfile-microservice-setting
    environment:
      NODE_ENV: "production"
    ports:
      - "3800:3800"
    depends_on:  
     - mongo-db
    networks:
      - network_microservices

  sqlserver-db:
    container_name: sqlserver-db
    hostname: "sqlserver-db"
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "PassWord123?"
      ACCEPT_EULA: "Y"
    networks:
      - network_microservices

  mongo-db:
    container_name: mongo-db
    hostname: "mongo-db"
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
     - ./Utils/docker-configs/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - network_microservices

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo-db:27017/
    depends_on:
      - mongo-db
    networks:
      - network_microservices

  rabbitmq: # login guest:guest
    container_name: rabbitmq
    image: rabbitmq:3-management
    hostname: "rabbitmq"
    labels:
      NAME: "rabbitmq"
    ports:
    - "4369:4369"
    - "5671:5671"
    - "5672:5672"
    - "25672:25672"
    - "15671:15671"
    - "15672:15672"
    networks:
      - network_microservices

  ldap:
    container_name: ldap
    image: openmicroscopy/apacheds:latest
    hostname: "ldap"
    ports:
      - "389:10389"
    networks:
      - network_microservices

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    hostname: "keycloak"
    ports:
      - "8180:8180"
    environment:
      KEYCLOAK_ADMIN: admin 
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: 
      - start-dev 
      - --http-port=8180
      - --import-realm
    volumes:
      - ./Utils/docker-configs/keycloak-realms/docker:/opt/keycloak/data/import
    networks:
      - network_microservices


networks:
  network_microservices:
